reverted:
--- b/poetry/utils/env.py
+++ a/poetry/utils/env.py
@@ -15,7 +15,6 @@
 from typing import List
 from typing import Optional
 from typing import Tuple
-from typing import Union
 
 import tomlkit
 
@@ -404,7 +403,7 @@
                 if venv.path.name == python:
                     # Exact virtualenv name
                     if not envs_file.exists():
+                        self.remove_venv(str(venv.path))
-                        self.remove_venv(venv.path)
 
                         return venv
 
@@ -414,7 +413,7 @@
 
                     current_env = envs.get(base_env_name)
                     if not current_env:
+                        self.remove_venv(str(venv.path))
-                        self.remove_venv(venv.path)
 
                         return venv
 
@@ -422,7 +421,7 @@
                         del envs[base_env_name]
                         envs_file.write(envs)
 
+                    self.remove_venv(str(venv.path))
-                    self.remove_venv(venv.path)
 
                     return venv
 
@@ -476,7 +475,7 @@
                     del envs[base_env_name]
                     envs_file.write(envs)
 
+        self.remove_venv(str(venv))
-        self.remove_venv(venv)
 
         return VirtualEnv(venv)
 
@@ -622,7 +621,7 @@
                 "Creating virtualenv <c1>{}</> in {}".format(name, str(venv_path))
             )
 
+            self.build_venv(str(venv), executable=executable)
-            self.build_venv(venv, executable=executable)
         else:
             if force:
                 if not env.is_sane():
@@ -634,8 +633,8 @@
                 io.write_line(
                     "Recreating virtualenv <c1>{}</> in {}".format(name, str(venv))
                 )
+                self.remove_venv(str(venv))
+                self.build_venv(str(venv), executable=executable)
-                self.remove_venv(venv)
-                self.build_venv(venv, executable=executable)
             elif io.is_very_verbose():
                 io.write_line("Virtualenv <c1>{}</> already exists.".format(name))
 
@@ -658,9 +657,7 @@
         return VirtualEnv(venv)
 
     @classmethod
+    def build_venv(cls, path, executable=None):
-    def build_venv(
-        cls, path, executable=None
-    ):  # type: (Union[Path,str], Optional[str]) -> ()
         if executable is not None:
             # Create virtualenv by using an external executable
             try:
@@ -685,41 +682,21 @@
                 use_symlinks = True
 
             builder = EnvBuilder(with_pip=True, symlinks=use_symlinks)
+            builder.create(path)
-            builder.create(str(path))
         except ImportError:
             try:
                 # We fallback on virtualenv for Python 2.7
                 from virtualenv import create_environment
 
+                create_environment(path)
-                create_environment(str(path))
             except ImportError:
                 # since virtualenv>20 we have to use cli_run
                 from virtualenv import cli_run
 
+                cli_run([path])
-                cli_run([str(path)])
 
+    def remove_venv(self, path):  # type: (str) -> None
+        shutil.rmtree(path)
-    @classmethod
-    def remove_venv(cls, path):  # type: (Union[Path,str]) -> None
-        if isinstance(path, str):
-            path = Path(path)
-        assert path.is_dir()
-        try:
-            shutil.rmtree(str(path))
-            return
-        except OSError as e:
-            # Continue only if e.errno == 16
-            if e.errno != 16:  # ERRNO 16: Device or resource busy
-                raise e
-
-        # Delete all files and folders but the toplevel one. This is because sometimes
-        # the venv folder is mounted by the OS, such as in a docker volume. In such
-        # cases, an attempt to delete the folder itself will result in an `OSError`.
-        # See https://github.com/python-poetry/poetry/pull/2064
-        for file_path in path.iterdir():
-            if file_path.is_file() or file_path.is_symlink():
-                file_path.unlink()
-            elif file_path.is_dir():
-                shutil.rmtree(str(file_path))
 
     def get_base_prefix(self):  # type: () -> Path
         if hasattr(sys, "real_prefix"):
